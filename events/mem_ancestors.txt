namespace = mem_ancestor

# Ancestor Crisis - Children of Azoth
# Code & idea by Frog, writing by Cc

# Swarm generated on ship destruction

country_event = {
	id = mem_ancestor.1
	
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROMFROM = {
			OR = {
				is_ship_size = mem_apostle_1
				is_ship_size = mem_apostle_2
				is_ship_size = mem_apostle_3
				is_ship_size = mem_apostle_4
				is_ship_size = mem_apostle_egg
				is_ship_size = mem_apostle_child
				is_ship_size = mem_apostle_scout
				is_ship_size = mem_apostle_xxl_cloud
				is_ship_size = mem_apostle_xl_cloud
				is_ship_size = mem_apostle_l_cloud
				is_ship_size = mem_apostle_m_cloud
				is_ship_size = mem_apostle_s_cloud
			}
		}
	}
	
	immediate = {
		
		FROMFROM = {
			owner = {
				save_event_target_as = mem_ancestor_swarm_owner
			}
			save_event_target_as = mem_ancestor_spawn
		}
		if = {
			limit = {
				FROMFROM = {
					OR = {
						is_ship_size = mem_apostle_1
						is_ship_size = mem_apostle_2
						is_ship_size = mem_apostle_3
						is_ship_size = mem_apostle_4
						is_ship_size = mem_apostle_egg
						is_ship_size = mem_apostle_child
						is_ship_size = mem_apostle_scout
						is_ship_size = mem_apostle_xxl_cloud
					}
				}
			}
			random_list = {
				25 = {
					mem_ancestor_infant = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				25 = {
					mem_ancestor_young = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				25 = {
					mem_ancestor_adult = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				25 = {
					mem_ancestor_elder = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
			}
		}
		if = {
			limit = {
				FROMFROM = {
					is_ship_size = mem_apostle_xl_cloud
				}
			}
			random_list = {
				30 = {
					mem_ancestor_infant = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				30 = {
					mem_ancestor_young = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				30= {
					mem_ancestor_adult = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				10 = {
					mem_ancestor_elder = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
			}
		}
		if = {
			limit = {
				FROMFROM = {
					is_ship_size = mem_apostle_l_cloud
				}
			}
			random_list = {
				45 = {
					mem_ancestor_infant = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				45 = {
					mem_ancestor_young = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				10 = {
					mem_ancestor_adult = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
			}
		}
		if = {
			limit = {
				FROMFROM = {
					is_ship_size = mem_apostle_m_cloud
				}
			}
			random_list = {
				90 = {
					mem_ancestor_infant = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
				10 = {
					mem_ancestor_young = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					break = yes
				}
			}
		}
		if = {
			limit = {
				FROMFROM = {
					is_ship_size = mem_apostle_s_cloud
				}
			}
			random_list = {
				10 = {
					mem_ancestor_infant = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
				}
				90 = {
				}
			}
		}	
	}
}

# Swarm divides on death

country_event = {
	id = mem_ancestor.2
	
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROMFROMFROM = {
			OR = {
				is_ship_size = mem_apostle_scout
				is_ship_size = mem_apostle_xxl_cloud
				is_ship_size = mem_apostle_xl_cloud
				is_ship_size = mem_apostle_l_cloud
				is_ship_size = mem_apostle_m_cloud
			}
		}
	}
	
	immediate = {
		FROMFROMFROM = {
			owner = {
				save_event_target_as = mem_ancestor_swarm_owner_1
			}
		}
		FROMFROM = {
			save_event_target_as = mem_ancestor_spawn_1
		}
		if = {
			limit = {
				FROMFROMFROM = {
					is_ship_size = mem_apostle_scout
				}
			}
			mem_ancestor_immortal_1 = yes
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			break = yes
		}
		if = {
			limit = {
				FROMFROMFROM = {
					is_ship_size = mem_apostle_xxl_cloud
				}
			}
			while = {
				count = 2
				mem_ancestor_elder_1 = yes
			}
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			break = yes
		}
		if = {
			limit = {
				FROMFROMFROM = {
					is_ship_size = mem_apostle_xl_cloud
				}
			}
			while = {
				count = 2
				mem_ancestor_adult_1 = yes
			}
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			break = yes
		}
		if = {
			limit = {
				FROMFROMFROM = {
					is_ship_size = mem_apostle_l_cloud
				}
			}
			while = {
				count = 2
				mem_ancestor_young_1 = yes
			}
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			break = yes
		}
		if = {
			limit = {
				FROMFROMFROM = {
					is_ship_size = mem_apostle_m_cloud
				}
			}
			while = {
				count = 2
				mem_ancestor_infant_1 = yes
			}
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
		}	
	}
}

# Leviathan evolves

country_event = {
	id = mem_ancestor.3
	
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = mem_ancestor_guardian
		has_country_flag = mem_ancestor_country
		NOT = {
			AND = {
				has_country_flag = mem_ancestor_evolve_1
				has_country_flag = mem_ancestor_evolve_2
				has_country_flag = mem_ancestor_evolve_3
				has_country_flag = mem_ancestor_evolve_4
			}
		}
		any_owned_ship = {
			OR = {
				is_ship_size = mem_apostle_1
				is_ship_size = mem_apostle_2
				is_ship_size = mem_apostle_3
				is_ship_size = mem_apostle_egg
			}
		}
	}
	
	immediate = {
		FROMFROM = {
			OWNER = {
				save_event_target_as = mem_ancestor_evolve_owner
			}
			save_event_target_as = mem_ancestor_evolve_spawn
		}
		if = {
			limit = {
				FROMFROM = {
					OWNER = {
						NOT = { has_country_flag = mem_ancestor_evolve_1 }
						count_owned_ships = {
							limit = {
								is_ship_size = mem_apostle_1
								FLEET = { is_same_value = event_target:mem_ancestor_evolve_spawn }
							}
							count > 0
						}
						num_owned_planets > 15
					}
				}
			}
			mem_ancestor_fanu_1 = yes
			FROMFROM = {
				delete_fleet = this
			}
			last_created_fleet = {
				mem_effect_explosion_8 = yes
			}
			set_country_flag = mem_ancestor_evolve_1
			every_country = {
				limit = {
					is_ai = no
					is_country_type = default
				}
				country_event = { id = mem_ancestor.45 days = 10 }
			}
			break = yes
		}
		if = {
			limit = {
				FROMFROM = {
					OWNER = {
						has_country_flag = mem_ancestor_evolve_1
						NOT = { has_country_flag = mem_ancestor_evolve_2 }
						count_owned_ships = {
							limit = {
								is_ship_size = mem_apostle_2
								FLEET = { is_same_value = event_target:mem_ancestor_evolve_spawn }
							}
							count > 0
						}
						num_owned_planets > 30
					}
				}
			}
			mem_ancestor_fanu_2 = yes
			FROMFROM = {
				delete_fleet = this
			}
			last_created_fleet = {
				mem_effect_explosion_8 = yes
			}
			set_country_flag = mem_ancestor_evolve_2
			break = yes
		}
		if = {
			limit = {
				FROMFROM = {
					OWNER = {
						AND = {
							has_country_flag = mem_ancestor_evolve_1
							has_country_flag = mem_ancestor_evolve_2
						}
						NOT = { has_country_flag = mem_ancestor_evolve_3 }
						count_owned_ships = {
							limit = {
								is_ship_size = mem_apostle_3
								FLEET = { is_same_value = event_target:mem_ancestor_evolve_spawn }
							}
							count > 0
						}
						num_owned_planets > 45
					}
				}
			}
			mem_ancestor_fanu_3 = yes
			mem_ancestor_thesan_1 = yes
			FROMFROM = {
				delete_fleet = this
			}
			last_created_fleet = {
				mem_effect_explosion_8 = yes
			}
			set_country_flag = mem_ancestor_evolve_3
			every_country = {
				limit = {
					is_ai = no
					is_country_type = default
				}
				country_event = { id = mem_ancestor.46 days = 10 }
			}
			break = yes
		}
		if = {
			limit = {
				FROMFROM = {
					OWNER = {
						AND = {
							has_country_flag = mem_ancestor_evolve_1
							has_country_flag = mem_ancestor_evolve_2
							has_country_flag = mem_ancestor_evolve_3
						}
						NOT = { has_country_flag = mem_ancestor_evolve_4 }
						count_owned_ships = {
							limit = {
								is_ship_size = mem_apostle_egg
								FLEET = { is_same_value = event_target:mem_ancestor_evolve_spawn }
							}
							count > 0
						}
						num_owned_planets > 60
					}
				}
			}
			mem_ancestor_thesan_2 = yes
			FROMFROM = {
				delete_fleet = this
			}
			last_created_fleet = {
				mem_effect_explosion_8 = yes
			}
			set_country_flag = mem_ancestor_evolve_4
			break = yes
		}
	}
}

# Swarm evolves

fleet_event = {
	id = mem_ancestor.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		THIS = {
			OWNER = {
				save_event_target_as = mem_ancestor_swarm_owner_2
			}
			save_event_target_as = mem_ancestor_spawn_2
		}
		if = {
			limit = {
				has_fleet_flag = mem_ancestor_infant_spawn
			}
			mem_ancestor_young_2 = yes
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			destroy_fleet = event_target:mem_ancestor_spawn_2
			break = yes
		}
		if = {
			limit = {
				has_fleet_flag = mem_ancestor_young_spawn
			}
			mem_ancestor_adult_2 = yes
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			destroy_fleet = event_target:mem_ancestor_spawn_2
			break = yes
		}
		if = {
			limit = {
				has_fleet_flag = mem_ancestor_adult_spawn
			}
			mem_ancestor_elder_2 = yes
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			destroy_fleet = event_target:mem_ancestor_spawn_2
			break = yes
		}
		if = {
			limit = {
				has_fleet_flag = mem_ancestor_elder_spawn
			}
			random_list = {
				10 = {
					mem_ancestor_infant_2 = yes
					last_created_fleet = {
						mem_effect_explosion_7 = yes
					}
					delete_fleet = event_target:mem_ancestor_spawn_2
					break = yes
				}
				90 = {
					destroy_fleet = event_target:mem_ancestor_spawn_2
					break = yes
				}
			}
		}
		if = {
			limit = {
				has_fleet_flag = mem_ancestor_boss_decay
			}
			mem_ancestor_immortal_2 = yes
			last_created_fleet = {
				mem_effect_explosion_7 = yes
			}
			destroy_fleet = event_target:mem_ancestor_spawn_2
		}
	}
}

# Planet conversion
planet_event = {
	id = mem_ancestor.5
	hide_window = yes
	
	trigger = {
		FROM = {
			is_country_type = mem_ancestor_guardian
		}
	}
	
	is_triggered_only = yes
	
	immediate = {
		add_threat = {
			who = from
			amount = 1000
		}
		this = {
			save_event_target_as = mem_ancestor_spawn_3
		}
		from = {
			save_event_target_as = mem_ancestor_swarm_owner_3
		}
		mem_ancestor_immortal_3 = yes
		create_ambient_object = {
			type = mem_effect_explosion_6_object
			location = THIS
			duration = 10
				
			use_3d_location = yes
				
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
				
			entity_scale_to_size = yes
			scale = 100
		}
		random_list = {
			25 = {
				create_ambient_object = {
				type = "small_debris_object"
				location = THIS
				}
			}
			25 = {
				create_ambient_object = {
				type = "medium_debris_01_object"
				location = THIS
				}
			}
			25 = {
				create_ambient_object = {
				type = "medium_debris_02_object"
				location = THIS
				}
			}
			25 = {
				create_ambient_object = {
				type = "large_debris_object"
				location = THIS
				}
			}
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
			}
			country_event = { id = mem_ancestor.47 days = 10 }
		}
		if = {
			limit = {
				NOT = {
					OR = {
						is_planet_class = pc_gaia
						is_planet_class = pc_ringworld_habitable 
						is_planet_class = pc_mem_ringworld_habitable 
						has_planet_flag = fallen_empire_world
						has_modifier = holy_planet
					}
				}
			}
			destroy_colony = yes
			change_pc = pc_gaia
			set_planet_max_health = 8000
			set_planet_health = 8000
			set_owner = event_target:mem_ancestor_swarm_owner_3
			set_planet_flag = mem_ancestor_world
			every_tile = {
				set_blocker = tb_mem_nature
			}
			add_resource = { 
				resource = sr_alien_pets
				amount = 1 
			}
			break = yes
		}
		if = {
			limit = {
					has_planet_flag = fallen_empire_world
					NOT = {
						is_planet_class = pc_ringworld_habitable
					}
			}
			destroy_colony = yes
			change_pc = pc_nuked
			every_tile = {
				set_building = mem_building_crisis_ruin
			}
			add_resource = { 
				resource = sr_betharian
				amount = 1
			}
			break = yes
		}
		if = {
			limit = {
				has_modifier = holy_planet 
			}
			destroy_colony = yes
			change_pc = pc_mem_cracked	
			set_planet_max_health = 0
			add_resource = { 
				resource = sr_dark_matter
				amount = 1
			}
			break = yes
		}
		if = {
			limit = {
				OR = {
					is_planet_class = pc_ringworld_habitable 
					is_planet_class = pc_mem_ringworld_habitable 
				}
			}
			destroy_colony = yes
			change_pc = pc_ringworld_habitable_damaged
			set_planet_max_health = 0
			add_resource = { 
				resource = sr_living_metal
				amount = 1
			}
		}
	}
}

planet_event = {
	id = mem_ancestor.6
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		FROM = {
			NOT = {
				is_country_type = mem_ancestor_guardian
			}
		}
		AND = {
			is_planet_class = pc_gaia
			has_planet_flag = mem_ancestor_world
		}
	}
	
	immediate = {
		THIS = {
			OWNER = {
			save_event_target_as = mem_ancestor_swarm_owner_4
			}
			save_event_target_as = mem_ancestor_spawn_4
		}
		mem_ancestor_immortal_4 = yes
		destroy_colony = yes
		set_planet_max_health = 0
		create_ambient_object = {
			type = mem_effect_explosion_6_object
			location = THIS
			duration = 10
				
			use_3d_location = yes
				
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
				
			entity_scale_to_size = yes
			scale = 100
		}
		random_list = {
			25 = { change_pc = pc_nuked }
			25 = { change_pc = pc_toxic }
			25 = { change_pc = pc_molten }
			25 = { change_pc = pc_barren }
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
			}
			country_event = { id = mem_ancestor.48 days = 10 }
		}
	}
}

ship_event = {
	id = mem_ancestor.20
	hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		is_ship_size = mem_apostle_seal
	}

	immediate = {
		from = {
			owner = {
				if = {
					limit = {
						NOT = {
							has_country_flag = mem_ancestor_seal_destroyer
						}
					}
				}
				set_country_flag = mem_ancestor_seal_destroyer
			}
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
			}
			country_event = { id = mem_ancestor.41 days = 10 }
		}
		mem_ancestor_seal_change_1 = yes
		mem_ancestor_seal_change_2 = yes
		mem_ancestor_seal_change_3 = yes
		mem_ancestor_seal_change_4 = yes
		mem_ancestor_seal_change_5 = yes
		mem_ancestor_seal_change_6 = yes
		
	}
}

planet_event = {
	id = mem_ancestor.21
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			save_event_target_as = mem_prison_system
			every_system_ambient_object = {
				if = {
					limit = {
						has_ambient_object_flag = mem_ancestor_seal_1_burst
					}
					this = {
						mem_effect_explosion_2 = yes
					}
					event_target:mem_prison_system = {
						every_system_planet = {
							limit = { has_planet_flag = mem_ancestor_prison_planet_1 }
							orbital_deposit_tile = {
								clear_deposits = yes
							}
							orbital_deposit_tile = {
								add_deposit = d_mem_seal_exhausted
							}
							change_pc = pc_black_hole
							mem_ancestor_clear_station = yes	
						}
					}
					destroy_ambient_object = this
					set_global_flag = mem_ancestor_seal_1_global
					mem_ancestor_seal_chain = yes
					break = yes
				}
				if = {
					limit = {
						has_ambient_object_flag = mem_ancestor_seal_2_burst
					}
					this = {
						mem_effect_explosion_2 = yes
					}
					event_target:mem_prison_system = {
						every_system_planet = {
							limit = { has_planet_flag = mem_ancestor_prison_planet_2 }
							orbital_deposit_tile = {
								clear_deposits = yes
							}
							orbital_deposit_tile = {
								add_deposit = d_mem_seal_exhausted
							}
							change_pc = pc_black_hole
							mem_ancestor_clear_station = yes
						}
					}
					destroy_ambient_object = this
					set_global_flag = mem_ancestor_seal_2_global
					mem_ancestor_seal_chain = yes
					break = yes
				}
				if = {
					limit = {
						has_ambient_object_flag = mem_ancestor_seal_3_burst
					}
					this = {
						mem_effect_explosion_2 = yes
					}
					event_target:mem_prison_system = {
						every_system_planet = {
							limit = { has_planet_flag = mem_ancestor_prison_planet_3 }
							orbital_deposit_tile = {
								clear_deposits = yes
							}
							orbital_deposit_tile = {
								add_deposit = d_mem_seal_exhausted
							}
							change_pc = pc_black_hole
							mem_ancestor_clear_station = yes
						}
					}
					destroy_ambient_object = this
					set_global_flag = mem_ancestor_seal_3_global
					mem_ancestor_seal_chain = yes
					break = yes
				}
				if = {
					limit = {
						has_ambient_object_flag = mem_ancestor_seal_4_burst
					}
					this = {
						mem_effect_explosion_2 = yes
					}
					event_target:mem_prison_system = {
						every_system_planet = {
							limit = { has_planet_flag = mem_ancestor_prison_planet_4 }
							orbital_deposit_tile = {
								clear_deposits = yes
							}
							orbital_deposit_tile = {
								add_deposit = d_mem_seal_exhausted
							}
							change_pc = pc_black_hole
							mem_ancestor_clear_station = yes
						}
					}
					destroy_ambient_object = this
					set_global_flag = mem_ancestor_seal_4_global
					mem_ancestor_seal_chain = yes
					break = yes
				}
				if = {
					limit = {
						has_ambient_object_flag = mem_ancestor_seal_5_burst
					}
					this = {
						mem_effect_explosion_2 = yes
					}
					event_target:mem_prison_system = {
						every_system_planet = {
							limit = { has_planet_flag = mem_ancestor_prison_planet_5 }
							orbital_deposit_tile = {
								clear_deposits = yes
							}
							orbital_deposit_tile = {
								add_deposit = d_mem_seal_exhausted
							}
							change_pc = pc_black_hole
							mem_ancestor_clear_station = yes
						}
					}
					destroy_ambient_object = this
					set_global_flag = mem_ancestor_seal_5_global
					mem_ancestor_seal_chain = yes
					break = yes
				}
				if = {
					limit = {
						has_ambient_object_flag = mem_ancestor_seal_6_burst
					}
					this = {
						mem_effect_explosion_2 = yes
					}
					event_target:mem_prison_system = {
						every_system_planet = {
							limit = { has_planet_flag = mem_ancestor_prison_planet_6 }
							orbital_deposit_tile = {
								clear_deposits = yes
							}
							orbital_deposit_tile = {
								add_deposit = d_mem_seal_exhausted
							}
							change_pc = pc_black_hole
							mem_ancestor_clear_station = yes
						}
					}
					destroy_ambient_object = this
					set_global_flag = mem_ancestor_seal_6_global
					mem_ancestor_seal_chain = yes
					break = yes
				}
			}
		}
	}
}

country_event = {
	id = mem_ancestor.22
	hide_window = yes
	fire_only_once = yes
	
	trigger = {
		AND = {
			has_global_flag = mem_ancestor_seal_1_global
			has_global_flag = mem_ancestor_seal_2_global
			has_global_flag = mem_ancestor_seal_3_global
			has_global_flag = mem_ancestor_seal_4_global
			has_global_flag = mem_ancestor_seal_5_global
			has_global_flag = mem_ancestor_seal_6_global
		}
	}

	immediate = {
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_ambient_object = { 
				limit = {
					has_ambient_object_flag = mem_ancestor_prison_ambient
				}
				this = {
				 save_event_target_as = mem_ancestor_prison_failure_1
				}
				create_ambient_object = {
					type = "mem_prison_weakened_1_object"
				}
				last_created_ambient_object = {
					set_location = event_target:mem_ancestor_prison_failure_1
					set_ambient_object_flag = mem_ancestor_prison_weakened_1
				}
				create_ambient_object = {
					type = mem_effect_explosion_2_object
					duration = 10
					
					use_3d_location = yes
					
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = 0 max = 0 }
					
					entity_scale_to_size = yes
					scale = 100
				}
				last_created_ambient_object = {
					set_location = event_target:mem_ancestor_prison_failure_1
				}
				destroy_ambient_object = this
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star 
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_prison_1
				}
			}
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
			}
			country_event = { id = mem_ancestor.42 days = 10 }
		}
		country_event = { id = mem_ancestor.23 days = 1800 }
	}
}

country_event = {
	id = mem_ancestor.23
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_ambient_object = { 
				limit = {
					has_ambient_object_flag = mem_ancestor_prison_weakened_1
				}
				this = {
				 save_event_target_as = mem_ancestor_prison_failure_2
				}
				create_ambient_object = {
					type = "mem_prison_weakened_2_object"
				}
				last_created_ambient_object = {
					set_location = event_target:mem_ancestor_prison_failure_2
					set_ambient_object_flag = mem_ancestor_prison_weakened_2
				}
				create_ambient_object = {
					type = mem_effect_explosion_2_object
					duration = 10
					
					use_3d_location = yes
					
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = 0 max = 0 }
					
					entity_scale_to_size = yes
					scale = 100
				}
				last_created_ambient_object = {
					set_location = event_target:mem_ancestor_prison_failure_2
				}
				destroy_ambient_object = this
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star 
				}
				orbital_deposit_tile = {
					clear_deposits = yes
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_prison_2
				}
				mem_ancestor_clear_station = yes
			}
		}
		country_event = { id = mem_ancestor.24 days = 1800 }
	}
}

country_event = {
	id = mem_ancestor.24
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_ambient_object = { 
				limit = {
					has_ambient_object_flag = mem_ancestor_prison_weakened_2
				}
				this = {
				 save_event_target_as = mem_ancestor_prison_failure_3
				}
				create_ambient_object = {
					type = "mem_prison_damaged_object"
				}
				last_created_ambient_object = {
					set_location = event_target:mem_ancestor_prison_failure_3
					set_ambient_object_flag = mem_ancestor_prison_weakened_3
				}
				create_ambient_object = {
					type = mem_effect_explosion_2_object
					duration = 10
					
					use_3d_location = yes
					
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = 0 max = 0 }
					
					entity_scale_to_size = yes
					scale = 100
				}
				last_created_ambient_object = {
					set_location = event_target:mem_ancestor_prison_failure_3
				}
				destroy_ambient_object = this
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star 
				}
				orbital_deposit_tile = {
					clear_deposits = yes
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_prison_3
				}
				mem_ancestor_clear_station = yes
			}
		}
		country_event = { id = mem_ancestor.25 days = 1800 }
	}
}

country_event = {
	id = mem_ancestor.25
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_ambient_object = { 
				limit = {
					has_ambient_object_flag = mem_ancestor_prison_weakened_3
				}
				destroy_ambient_object = this
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				change_pc = pc_black_hole
				change_planet_size = 100
				orbital_deposit_tile = {
					clear_deposits = yes
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_prison_exhausted
				}
				create_ambient_object = {
					type = mem_effect_explosion_6_object
					duration = 100
					
					location = this
					
					use_3d_location = yes
					
					entity_offset = { min = 0 max = 0 }
					entity_offset_angle = { min = 0 max = 0 }
					entity_offset_height = { min = 0 max = 0 }
					
					entity_scale_to_size = yes
					scale = 100
				}
				mem_ancestor_clear_station = yes
			}
			every_system_planet = {
				limit = {
					OR = {
						has_planet_flag = mem_ancestor_prison_planet_1
						has_planet_flag = mem_ancestor_prison_planet_2
						has_planet_flag = mem_ancestor_prison_planet_3
						has_planet_flag = mem_ancestor_prison_planet_4
						has_planet_flag = mem_ancestor_prison_planet_5
						has_planet_flag = mem_ancestor_prison_planet_6
					}
				}
				change_pc = pc_mem_planet_dummy
				orbital_deposit_tile = {
					clear_deposits = yes
				}
				mem_ancestor_clear_station = yes
			}
			every_fleet_in_system = {
				destroy_fleet = this
			}
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
			}
			country_event = { id = mem_ancestor.43 days = 10 }
		}
		country_event = { id = mem_ancestor.26 days = 360 }
	}
}

country_event = {
	id = mem_ancestor.26
	hide_window = yes
	is_triggered_only = yes
	
	immediate =  {
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			random_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				save_event_target_as = mem_ancestor_escape
				create_country = {
					name = "Chosen of Thesan"
					type = mem_ancestor_guardian
					flag = {
						icon = {
							category = "ornate"
							file = "flag_ornate_23.dds"
						}
						background= {
							category = "backgrounds"
							file = "00_solid.dds"
						}
						 colors={
							"pink"
							"pink"
							"null"
							"null"
						}
					}
				}
				last_created_country = {
					if = {
						limit = {
							NOT = {
								has_modifier = mem_ancestor_power
							}
						}
						add_modifier = {
							modifier = mem_ancestor_power
							days = -1
						}
					}
					save_global_event_target_as = mem_ancestor_country
					set_country_flag = mem_ancestor_country
					set_graphical_culture = fallen_empire_01
					guardian_difficulty = yes
					
					set_policy = {
						policy = orbital_bombardment
						option = orbital_bombardment_full
						cooldown = no
					}
				}
				mem_ancestor_vessel_init = yes
				while = {
					count = 6
					mem_ancestor_herald_init = yes
				}
			}
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
			}
			country_event = { id = mem_ancestor.44 days = 10 }
			establish_communications_no_message = event_target:mem_ancestor_country
		}
	}
}

country_event = {
	id = mem_ancestor.30
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			AND = {
				has_global_flag = mem_ancestor_seal_1_global
				has_global_flag = mem_ancestor_seal_2_global
				has_global_flag = mem_ancestor_seal_3_global
				has_global_flag = mem_ancestor_seal_4_global
				has_global_flag = mem_ancestor_seal_5_global
				has_global_flag = mem_ancestor_seal_6_global
			}
		}
	}

	immediate = {
		every_country = { 
			if = {
				limit = {
					has_country_flag = mem_prison_country
				}
				every_owned_ship = {
				mem_ancestor_seal_change_1 = yes
				mem_ancestor_seal_change_2 = yes
				mem_ancestor_seal_change_3 = yes
				mem_ancestor_seal_change_4 = yes
				mem_ancestor_seal_change_5 = yes
				mem_ancestor_seal_change_6 = yes
				}
			}
		}		
	}
}

# Entering system

ship_event = {
	id = mem_ancestor.40
	title = "mem_ancestor.40"
	desc = "mem_ancestor.40.desc"
	picture = GFX_evt_city_ruins
	show_sound = event_mystic_reveal_light
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancestor_seal_1_global
			has_global_flag = mem_ancestor_seal_2_global
			has_global_flag = mem_ancestor_seal_3_global
			has_global_flag = mem_ancestor_seal_4_global
			has_global_flag = mem_ancestor_seal_5_global
			has_global_flag = mem_ancestor_seal_6_global
		}
		owner = {
			NOT = {
			has_country_flag = mem_ancestor_seal_destroyer
			has_country_flag = encountered_mem_prison 
			}
			is_ai = no
		}
		FROM = {
			has_star_flag = mem_prison_system
			any_ship = { 
				AND = {
					is_ship_size = mem_apostle_seal
					owner = { is_country_type = mem_prison_passive }
				}
			}
		}
	}
	
	immediate = {
		from = {
			save_event_target_as = mem_prison_loc
		}
		owner = {
			establish_communications_no_message = event_target:mem_prison_country_1
			establish_communications_no_message = event_target:mem_prison_country_2
			establish_communications_no_message = event_target:mem_prison_country_3
			establish_communications_no_message = event_target:mem_prison_country_4
			establish_communications_no_message = event_target:mem_prison_country_5
			establish_communications_no_message = event_target:mem_prison_country_6
			set_country_flag = encountered_mem_prison
		}
	}	
	
	option = {
		name =  CURIOUS
	}
}

# Notification - seal busted

country_event = {
	id = mem_ancestor.41
	title = "mem_ancestor.41"
	desc = "mem_ancestor.41.desc"
	picture = GFX_evt_star_pulsar
	
	is_triggered_only = yes
	
	trigger = {
		has_country_flag = encountered_mem_prison
		NOT = {
			has_country_flag = mem_ancestor_seal_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_seal_notification
	}
	
	option = {
		name = "mem_ancestor.41.a"
	}
}

# Notification - tesseract breaks down

country_event = {
	id = mem_ancestor.42
	title = "mem_ancestor.42"
	desc = "mem_ancestor.42.desc"
	picture = GFX_evt_physics_research
	
	is_triggered_only = yes
	
	trigger = {
		has_country_flag = encountered_mem_prison
		NOT = {
			has_country_flag = mem_ancestor_prison_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_prison_notification
	}
	
	option = {
		name = "mem_ancestor.42.a"
	}
}

# Notification - tesseract explodes

country_event = {
	id = mem_ancestor.43
	title = "mem_ancestor.43"
	desc = "mem_ancestor.43.desc"
	picture = GFX_evt_black_hole
	
	is_triggered_only = yes
	
	trigger = {
		has_country_flag = encountered_mem_prison
		NOT = {
			has_country_flag = mem_ancestor_explosion_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_explosion_notification
	}
	
	option = {
		name = "mem_ancestor.43.a"
	}
}

# Notification - Leviathan appears

country_event = {
	id = mem_ancestor.44
	title = "mem_ancestor.44"
	desc = "mem_ancestor.44.desc"
	picture = GFX_evt_wormhole
	show_sound = event_red_alert
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_country_flag = mem_ancestor_crisis_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_crisis_notification
	}
	
	option = {
		name = "mem_ancestor.44.a"
	}
}

# Notification - Leviathan evolves

country_event = {
	id = mem_ancestor.45
	title = "mem_ancestor.45"
	desc = "mem_ancestor.45.desc"
	picture = GFX_evt_unspeakable_horror
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_country_flag = mem_ancestor_boss_evolution_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_boss_evolution_notification
	}
	
	option = {
		name = "mem_ancestor.45.a"
	}
}

# Notification - Leviathan gives birth

country_event = {
	id = mem_ancestor.46
	title = "mem_ancestor.46"
	desc = "mem_ancestor.46.desc"
	picture = GFX_evt_psionics
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_country_flag = mem_ancestor_boss_birth_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_boss_birth_notification
	}
	
	option = {
		name = "mem_ancestor.46.a"
	}
}

country_event = {
	id = mem_ancestor.47
	title = "mem_ancestor.47"
	desc = "mem_ancestor.47.desc"
	picture = GFX_evt_nuclear_explosion
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_country_flag = mem_ancestor_genocide_notification
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_genocide_notification
	}
	
	option = {
		name = "mem_ancestor.47.a"
	}
}

country_event = {
	id = mem_ancestor.48
	title = "mem_ancestor.48"
	desc = "mem_ancestor.48.desc"
	picture = GFX_evt_nuclear_explosion
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_country_flag = mem_ancestor_world_bombed
		}
	}
	
	immediate = {
		set_country_flag = mem_ancestor_world_bombed
	}
	
	option = {
		name = "mem_ancestor.48.a"
	}
}

country_event = {
	id = mem_ancestor.50
	hide_window = yes
	
	fire_only_once = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = mem_ancestor_guardian
		has_country_flag = mem_ancestor_country
		FROMFROM = { 
			OR = {
				is_ship_size = mem_apostle_1
				is_ship_size = mem_apostle_2
				is_ship_size = mem_apostle_3
				is_ship_size = mem_apostle_egg
				is_ship_size = mem_apostle_child
			}	
		}
		FROM = {
		is_ai = no 
		}
	}
	
	immediate = {
		every_planet = {
			limit = {
				has_planet_flag = mem_ancestor_world
			}
			every_tile = {
				limit = { has_blocker = "tb_mem_nature" }
				remove_blocker = yes
			}
		}
	    FROMFROM = {
			create_ambient_object = {
				type = mem_effect_explosion_8_object
				location = THIS
				duration = 10
				
				use_3d_location = yes
				
				entity_offset = { min = 0 max = 0 }
				entity_offset_angle = { min = 0 max = 0 }
				entity_offset_height = { min = 0 max = 0 }
				
				entity_scale_to_size = yes
				scale = 100
			}
		}
		FROM = {
			country_event = { id = mem_ancestor.51 }
			set_country_flag = mem_ancestor_slayer
		}
		every_country = {
			limit = { 
				is_country_type = default
				has_modifier = mem_ancestor_weakness
			}
			remove_modifier = "mem_ancestor_weakness"
		}
		every_country = {
			limit = {
				is_ai = no
				is_country_type = default
				has_special_project = MEM_ANCESTOR_WEAKNESS_PROJECT
			}
			abort_special_project = {
				type = "MEM_ANCESTOR_WEAKNESS_PROJECT"
				location = capital_scope
			}
		}
		add_threat = {
			who = FROM
			amount = 100
		}
		destroy_country = yes
	}
}

country_event = {
	id = mem_ancestor.51
	title = "mem_ancestor.51"
	desc = "mem_ancestor.51.desc"
	picture = GFX_evt_small_space_battle
	
	is_triggered_only = yes
	
	option = {
		name = "mem_ancestor.51.a"
	}
}

country_event = {
	id = mem_ancestor.60
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = mem_ancestor_guardian
		
		from = {
			NOT = {
				has_country_flag = mem_ancestor_weakness_check
			}
			is_country_type = default
			is_ai = no

			AND = {
				has_country_flag = mem_titan_slayer
				has_country_flag = mem_grave_slayer
				has_country_flag = mem_conduit_slayer
			}
		}
	}

	immediate = {
		from = {
			set_country_flag = mem_ancestor_weakness_check
			country_event = { id = mem_ancestor.61 }
		}
	}
}

country_event = {
	id = mem_ancestor.61
	title = "mem_ancestor.61"
	desc = "mem_ancestor.61.desc"
	picture = GFX_evt_exploding_ship
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = mem_ancestor_weakness_researched }
	}

	option = {
		name = mem_ancestor.61.a
		allow = {
			hidden_trigger = {
				NOT = { has_modifier = mem_ancestor_weakness }
			}
		}
		hidden_effect = { set_country_flag = mem_ancestor_weakness_researched }
		capital_scope = { save_event_target_as = mem_pc_home }
		enable_special_project = {
			name = "MEM_ANCESTOR_WEAKNESS_PROJECT"
			location = event_target:mem_pc_home
			owner = ROOT
		}
	}	
	option = {
		name = mem_ancestor.61.b
		add_influence = 100
	}
}

country_event = {
	id = mem_ancestor.62
	title = "mem_ancestor.62"
	desc = "mem_ancestor.62.desc"
	picture = GFX_evt_physics_research
	is_triggered_only = yes

	option = {
		name = mem_ancestor.62.a
		add_modifier = {
			modifier = mem_ancestor_weakness
			days = -1
		}
	}
}

