namespace = asnys

################################################################################
################################################################################
################################################################################

# Debug Event - Adds Four Tomb Worlds to Your Home System

country_event = {
    id = asnys.2
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_nuked
						}
					}
					change_pc = pc_nuked
				}
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_nuked
						}
					}
					change_pc = pc_nuked
				}
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_nuked
						}
					}
					change_pc = pc_nuked
				}
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_nuked
						}
					}
					change_pc = pc_nuked
				}
			}
		}
	}
}

# Debug Event - Allows You to Build Archive of Dead Worlds/Cathedral of Dead Gods without finishing Tomb World Survey:

country_event = {
	id = asnys.3
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		set_country_flag = mem_can_build_cathedral_of_dead_gods
		set_country_flag = mem_can_build_archive_of_dead_worlds
	}
}

# Debug Event - Used to check persistence of text in special project descriptions

country_event = {
	id = asnys.4
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		random_planet = {
			save_event_target_as = mem_tomb_survey_planet_1
		}
	}
}

# Debug Event - Instantly Completes Tomb World Survey After It's Started

country_event = {
	id = asnys.5
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		add_event_chain_counter = {
			event_chain = "mem_tomb_world_survey"
			counter = "mem_tomb_worlds_surveyed"
			amount = 4
		}
		country_event = { id = mem_tomb_survey.20 days = 4 }
	}
}

# Debug Event - Adds Four Toxic Worlds with Nuclear_Devastation to Your Home System

country_event = {
    id = asnys.6
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_toxic
						}
					}
					change_pc = pc_toxic
					add_modifier = {
						modifier = nuclear_devastation
						days = -1
					}
				}
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_toxic
						}
					}
					change_pc = pc_toxic
					add_modifier = {
						modifier = nuclear_devastation
						days = -1
					}
				}
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_toxic
						}
					}
					change_pc = pc_toxic
					add_modifier = {
						modifier = nuclear_devastation
						days = -1
					}
				}
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_toxic
						}
					}
					change_pc = pc_toxic
					add_modifier = {
						modifier = nuclear_devastation
						days = -1
					}
				}
			}
		}
	}
}

# Debug Event - Adds Tomb World with Ship_Graveyard to your Home System

country_event = {
    id = asnys.7
    hide_window = yes
    is_triggered_only = yes

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_capital = no
						is_star = no
						NOT = {
							is_planet_class = pc_nuked
						}
					}
					change_pc = pc_nuked
					add_modifier = {
						modifier = ship_graveyard
						days = -1
					}
				}
			}
		}
	}
}

# Debug Event - Adds a Gaia World with Stone Age Primitives to Home System

planet_event = {
	id = asnys.8
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		change_pc = pc_gaia
		add_planet_flag = stone_age_primitives
		add_modifier = {
			modifier = stone_age_civilization
			days = -1
		}
	}
}

# Debug Event - Checks if Planet Has Planet Flag for Colonized Neolithic Planet

country_event = {
	id = asnys.10
	title = "Hi There"
	picture = GFX_evt_society_research
	show_sound = event_scanner
	is_triggered_only = yes
	
	desc = {
		text = "Yes, It Does."
		trigger = {
			capital_scope = {
				solar_system = {
					any_planet = {
						has_planet_flag = mem_colonized_neolithic_planet
					}
				}
			}
		}
	}
	
	desc = {
		text = "No, It Doesn't."
		trigger = {
			NOT = {
				capital_scope = {
					solar_system = {
						any_planet = {
							has_planet_flag = mem_colonized_neolithic_planet
						}
					}
				}
			}
		}
	}
	
	option = {
		name = "That's Good."
	}
}

# Debug Event - TELL ME MY SINS

country_event = {
	id = asnys.11
	title = "Hi There"
	picture = GFX_evt_society_research
	show_sound = event_scanner
	is_triggered_only = yes

	desc = {
		text = "You conquered one primitive planet."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value = 1
			}
			NOT = {
				has_country_flag = mem_found_victim_planet_1
			}
		}
	}
	
	desc = {
		text = "You conquered the primitive planet [VictimPlanet1.getName]."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value = 1
			}
			has_country_flag = mem_found_victim_planet_1
		}
	}
	
	desc = {
		text = "You conquered two primitive planets."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value = 2
			}
			NOT = {
				has_country_flag = mem_found_victim_planet_1
			}
		}
	}

	desc = {
		text = "You conquered two primitive planets. One was named [VictimPlanet1.getName]."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value = 2
			}
			has_country_flag = mem_found_victim_planet_1
			NOT = {
				has_country_flag = mem_found_victim_planet_2
			}
		}
	}

	desc = {
		text = "You conquered the primitive planets [VictimPlanet1.getName] and [VictimPlanet2.getName]."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value = 2
			}
			has_country_flag = mem_found_victim_planet_2
		}
	}

	desc = {
		text = "You conquered more than two primitive planets."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value > 2
			}
			NOT = {
				has_country_flag = mem_found_victim_planet_1
			}
		}
	}
	
	desc = {
		text = "You conquered more than two primitive planets, including [VictimPlanet1.getName]."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value > 2
			}
			has_country_flag = mem_found_victim_planet_1
			NOT = {
				has_country_flag = mem_found_victim_planet_2
			}
		}
	}
	
	desc = {
		text = "You conquered more than two primitive planets, including [VictimPlanet1.getName] and [VictimPlanet2.getName]."
		trigger = {
			check_variable = {
				which = mem_primitive_planets_conquered
				value > 2
			}
			has_country_flag = mem_found_victim_planet_2
		}
	}
	
	desc = {
		text = "You're spotless - or, more likely, we just haven't figured out how to track your sins yet."
		trigger = {
			has_country_flag = mem_spotless
		}
	}
	
	immediate = {
		# Find primitive planets you conquered:
	
		random_planet_within_border = {
			limit = {
				has_planet_flag = mem_conquered_primitive_planet
			}
			save_event_target_as = VictimPlanet1
			set_planet_flag = mem_designated_victim
			owner = {
				set_country_flag = mem_found_victim_planet_1
			}
		}
		random_planet_within_border = {
			limit = {
				has_planet_flag = mem_conquered_primitive_planet
				NOT = { has_planet_flag = mem_designated_victim }
			}
			save_event_target_as = VictimPlanet2
			owner = {
				set_country_flag = mem_found_victim_planet_2
			}
		}
		
		# Check if you're spotless:
		
		if = {
			limit = {
				check_variable = {
					which = mem_primitive_planets_conquered
					value = 0
				}
			}
			set_country_flag = mem_spotless
		}
	}
	
	option = {
		name = "The shame! The shame!"
		hidden_effect = {
			remove_country_flag = mem_found_victim_planet_1
			remove_country_flag = mem_found_victim_planet_2
			remove_country_flag = mem_spotless
			random_planet_within_border = {
				limit = {
					has_planet_flag = mem_designated_victim
				}
				remove_planet_flag = mem_designated_victim
			}
		}
	}
}