namespace = mem_freighter_stasis

#Freighter in Stasis
#Idea and Writing by Maria
#Code and Writing by LamilLerran

# Start event
planet_event = {
	id = mem_freighter_stasis.1
	hide_window = yes
	
	mean_time_to_happen = {
		months = 2400
	}
	
	trigger = {
		years_passed > 40
		NOT = { has_global_flag = mem_freighter_stasis_started }
		has_owner = yes
		owner = { is_ai = no }
		
		#No one but the planet owner may have high intel level of system; this means that,
		#at least initially, only one player will find the ship.
		solar_system = { NOT = { any_country = {
			intel_level = {
				level = high
				system = prev
			}
			NOT = { is_same_value = root.owner }
		} } }
	}
	
	immediate = {
		set_global_flag = mem_freighter_stasis_started
		solar_system = {
			set_star_flag = mem_freighter_stasis_arrival_star
			random_system_planet = {
				limit = { is_star = yes }
				save_event_target_as = mem_freighter_stasis_star
			}
		}
		create_country = {
			name = "TODO: Faction Name MEM-FS"
			type = faction
		}
		last_created_country = {
			create_fleet = { name = "Adrift Fleet" }
			set_country_flag = mem_freighter_stasis_refugee_country
			last_created_fleet = {
				set_owner = PREV
				set_fleet_flag = mem_freighter_stasis_refugee_fleet
				create_ship = {
					name = "Unguided Ship"
					design = "MEM-Freighter-Stasis-Freighter"	
				}
				last_created_ship = {
					save_event_target_as = mem_freighter_stasis_ship
				}
				set_location = {
					target = event_target:mem_freighter_stasis_star
					distance = 250 #TODO: Calibrate -- note that systems seem to vary in size
					angle = random #TODO: Need to keep track of what angle this is; may have to select from cases
				}
				set_fleet_stance = passive
				queue_actions = {
					move_to = event_target:mem_freighter_stasis_star
					effect = {
						id = "mem_freighter_stasis.2.effect.1"
						destroy_fleet = this
						every_country = { #TODO: Test if this works for secondary observers
							limit = {
								has_country_flag = mem_freighter_stasis_observed
							}
							abort_special_project = {
								type = MEM_FREIGHTER_STASIS_BOARD_MIL
								location = this
							}
							abort_special_project = {
								type = MEM_FREIGHTER_STASIS_BOARD_SCI
								location = this
							}
							country_event = { id = mem_freighter_stasis.9 }
						}
					}
				}
			}
			set_faction_hostility = { set_hostile = no }
			establish_communications_no_message = root.owner	#TODO: This may not be working correctly?
		}
		
		owner = { country_event = { id = mem_freighter_stasis.2 } }
	}
}

# Observing empire's first seen event
country_event = {
	id = mem_freighter_stasis.2
	title = "mem_freighter_stasis.2.name"
	desc = "mem_freighter_stasis.2.desc"
	picture = GFX_evt_automated_dreadnought #TODO: Confirm works for people w/out expansion
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_country_flag = mem_freighter_stasis_observed }
	}
	
	immediate = {
		set_country_flag = mem_freighter_stasis_observed
		save_global_event_target_as = mem_freighter_stasis_initial_observers

	}
	
	option = {
		name = "mem_freighter_stasis.2.a"
		event_target:mem_freighter_stasis_ship = {
			enable_special_project = {
				name = "MEM_FREIGHTER_STASIS_BOARD_MIL"
				location = this
				owner = root
			}
		}
	}
	
	option = {
		name = "mem_freighter_stasis.2.b"
		event_target:mem_freighter_stasis_ship = {
			enable_special_project = {
				name = "MEM_FREIGHTER_STASIS_BOARD_SCI"
				location = this
				owner = root
			}
		}
	}
	
	option = {
		name = "mem_freighter_stasis.2.c"
	}
	
	option = {
		trigger = { OR = {
			has_ethic = ethic_xenophobe
			has_ethic = ethic_fanatic_xenophobe
		} }
		name = "mem_freighter_stasis.2.phobe"
		#TODO: Ensure ship hostile
	}
	
	option = {
		trigger = { OR = {
			has_ethic = ethic_militarist
			has_ethic = ethic_fanatic_militarist
		} }
		name = "mem_freighter_stasis.2.mil"
		#TODO: Ensure ship hostile
	}
	
	option = {
		trigger = { OR = {
			has_ethic = ethic_pacifist
			has_ethic = ethic_fanatic_pacifist
		} }
		name = "mem_freighter_stasis.2.pac"
		event_target:mem_freighter_stasis_ship = {
			enable_special_project = {
				name = "MEM_FREIGHTER_STASIS_BOARD_SCI"
				location = this
				owner = root
			}
		}	}
	
	option = {
		trigger = { OR = {
			has_ethic = ethic_xenophile
			has_ethic = ethic_fanatic_xenophile
		} }
		name = "mem_freighter_stasis.2.phile"
		event_target:mem_freighter_stasis_ship = {
			enable_special_project = {
				name = "MEM_FREIGHTER_STASIS_BOARD_SCI"
				location = this
				owner = root
			}
		}	}
	
	option = {
		trigger = { OR = {
			has_ethic = ethic_individualist
			has_ethic = ethic_fanatic_individualist
		} }
		name = "mem_freighter_stasis.2.ind"
		tooltip = "mem_freighter_stasis.2.ind.tooltip"
		#TODO: Ensure ship neutral
	}
 
	option = {
		trigger = { OR = {
			has_ethic = ethic_collectivist
			has_ethic = ethic_fanatic_collectivist
		} }
		name = "mem_freighter_stasis.2.col"
		event_target:mem_freighter_stasis_ship = {
			enable_special_project = {
				name = "MEM_FREIGHTER_STASIS_BOARD_SCI"
				location = this
				owner = root
			}
		}	}
}

# Another Empire sees the ship for the first time
# As per on_action comments:
# From = System
fleet_event = {
	id = mem_freighter_stasis.3
	title = "mem_freighter_stasis.3.name"
	desc = "mem_freighter_stasis.3.desc"
	picture = TODO
	is_triggered_only = yes
	
	trigger = {
		has_global_flag = mem_freighter_stasis_started
		from = { has_star_flag = mem_freighter_stasis_arrival_star }
		owner = { NOT = { has_country_flag = mem_freighter_stasis_observed } }
	}
	
	immediate = {
		#TODO: This mimics the approach of 2. Make sure that works and these work together.
		owner = { set_country_flag = mem_freighter_stasis_observed }
		event_target:mem_freighter_stasis_ship = {
			enable_special_project = {
				name = "MEM_FREIGHTER_STASIS_BOARD_MIL"
				location = this
				owner = root
			}
		}
	}
	
	#TODO: Multiple options?
	option = {
		name = "mem_freighter_stasis.3.a"
	}
}

#We destroyed it
# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
country_event = {
	id = mem_freighter_stasis.6
	title = "mem_freighter_stasis.6.name"
	desc = "mem_freighter_stasis.6.desc"
	picture = TODO
	is_triggered_only = yes
	
	trigger = {
		FromFromFrom = { has_fleet_flag = mem_freighter_stasis_refugee_fleet }
	}
	
	immediate = {
		every_country = {
			limit = {
				has_country_flag = mem_freighter_stasis_observed
				NOT = { is_same_value = this }
			}
			country_event = { id = mem_freighter_stasis.7 }
		}
		clear_global_event_target = mem_freighter_stasis_initial_observers
	}
	
	option = { name = EXCELLENT }
	option = { name = mem_freighter_stasis.6.b }
}

#Someone else destroyed it
country_event = {
	id = mem_freighter_stasis.7
	title = "mem_freighter_stasis.7.name"
	desc = "mem_freighter_stasis.7.desc"
	picture = TODO
	is_triggered_only = yes
	
	
	immediate = {
		clear_global_event_target = mem_freighter_stasis_initial_observers
	}
	
	option = { name = mem_freighter_stasis.7.a }
}

#Someone else examined ship first
country_event = {
	id = mem_freighter_stasis.8
	title = "mem_freighter_stasis.8.name"
	desc = "mem_freighter_stasis.8.desc"
	picture = TODO
	is_triggered_only = yes
	
	immediate = {
		#TODO: Any cleanup needed?
	}
	
	option = {
		name = "mem_freighter_stasis.8.a"
	}
	
	option = {
		name = UNFORTUNATE
	}
}

#Ship plummets into star before anyone examines it
country_event = {
	id = mem_freighter_stasis.9
	title = "mem_freighter_stasis.9.name"
	desc = "mem_freighter_stasis.9.desc"
	picture = TODO
	is_triggered_only = yes
	
	immediate = {
		#TODO: Cleanup
		set_global_flag = mem_freighter_stasis_freighter_destroyed
		clear_global_event_target = mem_freighter_stasis_initial_observers
		random_system = {
			limit = { has_star_flag = mem_freighter_stasis_arrival_star }
			remove_star_flag = mem_freighter_stasis_arrival_star
		}
		random_country = {
			limit = { has_country_flag = mem_freighter_stasis_refugee_country }
			#TODO: delete it
		}
	}
	
	option = {
		name = "mem_freighter_stasis.9.a"
		#TODO: Anything beyond the message?
	}
}

#Project Success!
ship_event = {
	id = mem_freighter_stasis.10
	title = "mem_freighter_stasis.10.name"
	desc = "mem_freighter_stasis.10.desc"
	picture = TODO
	is_triggered_only = yes
	
	immediate = {
		#TODO: Any other cleanup needed?
		set_global_flag = mem_freighter_stasis_freighter_contacted
		owner = { clear_global_event_target = mem_freighter_stasis_initial_observers }
		every_country = {
			limit = {
				has_country_flag = mem_freighter_stasis_observed
				NOT = { is_same_value = root.owner }
			}
			clear_global_event_target = mem_freighter_stasis_initial_observers
			abort_special_project = {
				type = MEM_FREIGHTER_STASIS_BOARD_MIL
				location = this
			}
			abort_special_project = {
				type = MEM_FREIGHTER_STASIS_BOARD_SCI
				location = this
			}
			country_event = { id = mem_freighter_stasis.8 }
		}
	}
	
	option = {
		name = "mem_freighter_stasis.10.a"
		ship_event = { id = mem_freighter_stasis.11 } #Spawn next planet. TODO: change type?
		#TODO: Anything beyond the message and the next event?
	}
}

#Spawn origin system of ship w/ tomb world
#Probably want to put a follow-up event announcing this to discoverer
ship_event = {
	id = mem_freighter_stasis.11
	hide_window = yes
	fire_only_once = yes
	is_triggered_only = yes
	
	immediate = {
		solar_system = {
			spawn_system = {
				min_distance = 15
				max_distance = 30
				#angle = 20	#TODO: possible? Signs point to no ...
				initializer = "mem_freighter_stasis_home_system"
			}
		}
		ship_event = { id = mem_freighter_stasis.4747 }
		#TODO: Confirm .10 sufficient to announce finding
	}
}

#TODO: Anything in the system?

#TODO: Delete the following debug event
ship_event = {
	id = mem_freighter_stasis.4747
	
	title = "Debug event"
	desc = "Debug event mem_freighter_stasis.4747 was called."
	picture = TODO
	is_triggered_only = yes
	
	option = { name = "Hmm..." }
}
