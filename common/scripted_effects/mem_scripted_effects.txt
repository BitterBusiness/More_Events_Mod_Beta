
mem_effect_explosion_2 = {
	create_ambient_object = {
		type = mem_effect_explosion_2_object
		location = THIS
		duration = 10
		
		use_3d_location = yes
		
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
		
		entity_scale_to_size = yes
		scale = 10
	}
}

mem_effect_explosion_7 = {
	create_ambient_object = {
		type = mem_effect_explosion_7_object
		location = THIS
		duration = 10
			
		use_3d_location = yes
			
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
			
		entity_scale_to_size = yes
		scale = 1.0
	}
}

mem_effect_explosion_8 = {
	create_ambient_object = {
		type = mem_effect_explosion_8_object
		location = THIS
		duration = 10
			
		use_3d_location = yes
			
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
			
		entity_scale_to_size = yes
		scale = 5.0
	}
}

#mem_ancestor.1 templates

mem_ancestor_infant = {
	create_fleet = {
		name = "Infant Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan I"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_infant_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 90}
		}
	}
}

mem_ancestor_young = {
	create_fleet = {
		name = "Young Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_young_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 180}
		}
	}
}

mem_ancestor_adult = {
	create_fleet = {
		name = "Adult Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_adult_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 270 }
		}
	}
}

mem_ancestor_elder = {
	create_fleet = {
		name = "Elder Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan IV"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_elder_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self

			fleet_event = { id = mem_ancestor.4 days = 360 }
		}
	}
}

#mem_ancestor.2 templates

mem_ancestor_adult_split = {
	create_fleet = {
		name = "Adult Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_split_owner
			create_ship = {
				name = "Fler"
				design = "Alpan III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_split_spawn
			set_fleet_flag = mem_ancestor_adult_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 270 }
		}
	}
}

mem_ancestor_young_split = {
	create_fleet = {
		name = "Young Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_split_owner
			create_ship = {
			name = "Fler"
			design = "Alpan II"
			prefix = no
			}
			set_location = event_target:mem_ancestor_split_spawn
			set_fleet_flag = mem_ancestor_young_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 180}
		}
	}
}

mem_ancestor_infant_split = {
	create_fleet = {
		name = "Infant Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_split_owner
			create_ship = {
			name = "Fler"
			design = "Alpan I"
			prefix = no
			}
			set_location = event_target:mem_ancestor_split_spawn
			set_fleet_flag = mem_ancestor_infant_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 90}
		}
	}
}

#mem_ancestor.4 Maiden death templates

mem_ancestor_infant_evolve = {
	create_fleet = {
		name = "Infant Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_spawn_owner
			create_ship = {
				name = "Fler"
				design = "Alpan I"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_evolve
			set_fleet_flag = mem_ancestor_infant_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 90}
		}
	}
}

mem_ancestor_young_evolve = {
	create_fleet = {
		name = "Young Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_spawn_owner
			create_ship = {
				name = "Fler"
				design = "Alpan II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_evolve
			set_fleet_flag = mem_ancestor_young_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 180 }
		}
	}
}

mem_ancestor_adult_evolve = {
	create_fleet = {
		name = "Adult Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_spawn_owner
			create_ship = {
				name = "Fler"
				design = "Alpan III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_evolve
			set_fleet_flag = mem_ancestor_adult_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 270 } 
		}
	}
}

mem_ancestor_elder_evolve = {
	create_fleet = {
		name = "Elder Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_spawn_owner
			create_ship = {
				name = "Fler"
				design = "Alpan IV"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_evolve
			set_fleet_flag = mem_ancestor_elder_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 360 }
		}
	}
}

mem_ancestor_seal_change_1 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_1
		}
		this = {
			save_event_target_as = mem_ancestor_seal_1_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_1_loc
			set_ambient_object_flag = mem_ancestor_seal_1_burst
		}
		create_ambient_object = {
			type =mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_1_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_1
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_2 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_2
		}
		this = {
			save_event_target_as = mem_ancestor_seal_2_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_2_loc
			set_ambient_object_flag = mem_ancestor_seal_2_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_2_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_2
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_3 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_3
		}
		this = {
			save_event_target_as = mem_ancestor_seal_3_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_3_loc
			set_ambient_object_flag = mem_ancestor_seal_3_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_3_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_3
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_4 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_4
		}
		this = {
			save_event_target_as = mem_ancestor_seal_4_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_4_loc
			set_ambient_object_flag = mem_ancestor_seal_4_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_4_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_4
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_5 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_5
		}
		this = {
			save_event_target_as = mem_ancestor_seal_5_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_5_loc
			set_ambient_object_flag = mem_ancestor_seal_5_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_5_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet= {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_5
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_6 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_6
		}
		this = {
			save_event_target_as = mem_ancestor_seal_6_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_6_loc
			set_ambient_object_flag = mem_ancestor_seal_6_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_6_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_6
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_clear_station = {
	if = {
		limit = {
			has_research_station = yes 
		}
		random_research_station = {
				destroy_fleet = this
		}
	}
}