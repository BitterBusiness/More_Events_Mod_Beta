# Effect Snippets

mem_effect_explosion_2 = {
	create_ambient_object = {
		type = mem_effect_explosion_2_object
		location = THIS
		duration = 10
		
		use_3d_location = yes
		
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
		
		entity_scale_to_size = yes
		scale = 10
	}
}

mem_effect_explosion_7 = {
	create_ambient_object = {
		type = mem_effect_explosion_7_object
		location = THIS
		duration = 10
			
		use_3d_location = yes
			
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
			
		entity_scale_to_size = yes
		scale = 1.0
	}
}

mem_effect_explosion_8 = {
	create_ambient_object = {
		type = mem_effect_explosion_8_object
		location = THIS
		duration = 10
			
		use_3d_location = yes
			
		entity_offset = { min = 0 max = 0 }
		entity_offset_angle = { min = 0 max = 0 }
		entity_offset_height = { min = 0 max = 0 }
			
		entity_scale_to_size = yes
		scale = 5.0
	}
}

#mem_ancestor.1 templates

mem_ancestor_infant = {
	create_fleet = {
		name = "Infant Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan I"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_infant_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 45 }
		}
	}
}

mem_ancestor_young = {
	create_fleet = {
		name = "Young Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_young_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 90 }
		}
	}
}

mem_ancestor_adult = {
	create_fleet = {
		name = "Adult Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_adult_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 180 }
		}
	}
}

mem_ancestor_elder = {
	create_fleet = {
		name = "Elder Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner
			create_ship = {
				name = "Fler"
				design = "Alpan IV"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn
			set_fleet_flag = mem_ancestor_elder_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self

			fleet_event = { id = mem_ancestor.4 days = 360 }
		}
	}
}

#mem_ancestor.1 templates

mem_ancestor_infant_1 = {
	create_fleet = {
		name = "Infant Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_1
			create_ship = {
				name = "Fler"
				design = "Alpan I"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_1
			set_fleet_flag = mem_ancestor_infant_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 45 }
		}
	}
}

mem_ancestor_young_1 = {
	create_fleet = {
		name = "Young Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_1
			create_ship = {
				name = "Fler"
				design = "Alpan II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_1
			set_fleet_flag = mem_ancestor_young_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 90 }
		}
	}
}

mem_ancestor_adult_1 = {
	create_fleet = {
		name = "Adult Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_1
			create_ship = {
				name = "Fler"
				design = "Alpan III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_1
			set_fleet_flag = mem_ancestor_adult_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 180 }
		}
	}
}

mem_ancestor_elder_1 = {
	create_fleet = {
		name = "Elder Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_1
			create_ship = {
				name = "Fler"
				design = "Alpan IV"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_1
			set_fleet_flag = mem_ancestor_elder_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self

			fleet_event = { id = mem_ancestor.4 days = 360 }
		}
	}
}

mem_ancestor_immortal_1 = {
	create_fleet = {
		name = "Immortal Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_1
			create_ship = {
				name = "Fler"
				design = "Alpan V"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_1
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_monstrosity.roam.1a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_monstrosity.roam.1b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 25
										random = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

#mem_ancestor.1 templates

mem_ancestor_infant_2 = {
	create_fleet = {
		name = "Infant Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_2
			create_ship = {
				name = "Fler"
				design = "Alpan I"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_2
			set_fleet_flag = mem_ancestor_infant_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 45 }
		}
	}
}

mem_ancestor_young_2 = {
	create_fleet = {
		name = "Young Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_2
			create_ship = {
				name = "Fler"
				design = "Alpan II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_2
			set_fleet_flag = mem_ancestor_young_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 90 }
		}
	}
}

mem_ancestor_adult_2 = {
	create_fleet = {
		name = "Adult Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_2
			create_ship = {
				name = "Fler"
				design = "Alpan III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_2
			set_fleet_flag = mem_ancestor_adult_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			fleet_event = { id = mem_ancestor.4 days = 180 }
		}
	}
}

mem_ancestor_elder_2 = {
	create_fleet = {
		name = "Elder Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_2
			create_ship = {
				name = "Fler"
				design = "Alpan IV"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_2
			set_fleet_flag = mem_ancestor_elder_spawn
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self

			fleet_event = { id = mem_ancestor.4 days = 360 }
		}
	}
}

mem_ancestor_immortal_2 = {
	create_fleet = {
		name = "Immortal Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_2
			create_ship = {
				name = "Fler"
				design = "Alpan V"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_2
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_monstrosity.roam.2a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_monstrosity.roam.2b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 25
										random = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


# ancestor monstrosity templates

mem_ancestor_immortal_3 = {
	create_fleet = {
		name = "Immortal Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_3
			create_ship = {
				name = "Fler"
				design = "Alpan V"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_3
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_monstrosity.roam.3a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_monstrosity.roam.3b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 25
										random = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# ancestor monstrosity templates

mem_ancestor_immortal_4 = {
	create_fleet = {
		name = "Immortal Star Spawn"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_swarm_owner_4
			create_ship = {
				name = "Fler"
				design = "Alpan V"
				prefix = no
			}
			set_location = event_target:mem_ancestor_spawn_4
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_monstrosity.roam.4a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_monstrosity.roam.4b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 25
										random = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# ancestor leviathan templates

mem_ancestor_fanu_1 = {
	create_fleet = {
		name = "Vessel of Thesan"
		settings = {
			spawn_debris = no 
			is_boss = yes
		}
		effect = {
			set_owner = event_target:mem_ancestor_evolve_owner
			create_ship = {
				name = "Fanu"
				design = "Persipnei II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_evolve_spawn
			
			set_fleet_flag = mem_ancestor_boss_fleet
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 500
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_boss.roam.2a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_boss.roam.2b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 200
										random = 50
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

mem_ancestor_fanu_2 = {
	create_fleet = {
		name = "Vessel of Thesan"
		settings = {
			spawn_debris = no 
			is_boss = yes
		}
		effect = {
			set_owner = event_target:mem_ancestor_evolve_owner
			create_ship = {
				name = "Fanu"
				design = "Persipnei III"
				prefix = no
			}
			set_location = event_target:mem_ancestor_evolve_spawn
			
			set_fleet_flag = mem_ancestor_boss_fleet
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 500

			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_boss.roam.3a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_boss.roam.3b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 300
										random = 75
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

mem_ancestor_fanu_3 = {
	create_fleet = {
		name = "Vessel of Thesan"
		settings = {
			spawn_debris = no 
			is_boss = yes
		}
		effect = {
			set_owner = event_target:mem_ancestor_evolve_owner
			create_ship = {
				name = "Fanu"
				design = "Persipnei IV"
				prefix = no
			}
			set_location = event_target:mem_ancestor_evolve_spawn
			
			set_fleet_flag = mem_ancestor_boss_decay
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 500
			
			fleet_event = { id = mem_ancestor.4 days = 1800 }
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_boss.roam.4a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_boss.roam.4b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 400
										random = 100
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

mem_ancestor_thesan_1 = {
	create_fleet = {
		name = "Thesan"
		settings = {
			spawn_debris = no 
			is_boss = yes
		}
		effect = {
			set_owner = event_target:mem_ancestor_evolve_owner
			create_ship = {
				name = "Ais"
				design = "Tinia I"
				prefix = no
			}
			set_location = event_target:mem_ancestor_evolve_spawn
			
			set_fleet_flag = mem_ancestor_boss_fleet
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 500
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_boss.roam.5a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_boss.roam.5b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 50
										random = 25
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

mem_ancestor_thesan_2 = {
	create_fleet = {
		name = "Thesan"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_evolve_owner
			create_ship = {
				name = "Ais"
				design = "Tinia II"
				prefix = no
			}
			set_location = event_target:mem_ancestor_evolve_spawn
			
			set_fleet_flag = mem_ancestor_boss_fleet
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 500
			
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_boss.roam.6a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_boss.roam.6b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 50
										random = 25
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# ancestor initial spawn templates

mem_ancestor_vessel_init = {
	create_fleet = {
		name = "Vessel of Thesan"
		settings = {
			spawn_debris = no 
			is_boss = yes
		}
		effect = {
			set_owner = event_target:mem_ancestor_country
			create_ship = {
				name = "Fanu"
				design = "Persipnei I"
				prefix = no
			}
			set_fleet_flag = mem_ancestor_boss_fleet
			set_fleet_stance = aggressive
			set_aggro_range_measure_from = self
			set_aggro_range = 500
			
			set_location = {
			target = event_target:mem_ancestor_escape
			distance = 0
			angle = random 
			}
			queue_actions = {
				repeat = {
					find_closest_system = {
						trigger = {
							id = mem_ancestor_boss.roam.1a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_boss.roam.1b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 100
										random = 25
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

mem_ancestor_herald_init = {
	create_fleet = {
		name = "Herald of Thesan"
		settings = {
			spawn_debris = no 
		}
		effect = {
			set_owner = event_target:mem_ancestor_country
			create_ship = {
				name = "Favi"
				design = "Eita"
				prefix = no
			}
			set_location = event_target:mem_ancestor_escape
			
			set_fleet_stance = aggressive
			set_aggro_range = 500
			set_aggro_range_measure_from = self

			queue_actions = {
				repeat = {
					find_random_system = {
						trigger = {
							id = mem_ancestor_herald.roam.2a
							exists = space_owner
							any_planet = {
								OR = {
									has_spaceport = yes  
									has_observation_outpost = yes
									has_mining_station = yes
									has_research_station = yes 
								}
							}
							NOT = {
								OR = {
									has_star_flag = mem_ring_system
									has_star_flag = mem_grave_system
									has_star_flag = mem_garden_system
								}
								space_owner = {
									is_same_value = event_target:mem_ancestor_country
								}
							}
						}
						found_system = {
							move_to = this
							
							find_closest_planet = {
								trigger = {
									id = mem_ancestor_herald.roam.2b
									OR = {
										has_spaceport = yes  
										has_observation_outpost = yes
										has_mining_station = yes
										has_research_station = yes 
									}
								}
								found_planet = {
									move_to = this
									wait = {
										duration = 25
										random = 5
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# pop seal chainreaction

mem_ancestor_seal_chain = {
	random_country = {
		if = {
			limit = {
				has_country_flag = mem_ancestor_seal_destroyer
			}
			country_event = { id = mem_ancestor.30 days = 3600 }
		}
	}
}

# Pop seals

mem_ancestor_seal_change_1 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_1
		}
		this = {
			save_event_target_as = mem_ancestor_seal_1_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_1_loc
			set_ambient_object_flag = mem_ancestor_seal_1_burst
		}
		create_ambient_object = {
			type =mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_1_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_1
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_2 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_2
		}
		this = {
			save_event_target_as = mem_ancestor_seal_2_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_2_loc
			set_ambient_object_flag = mem_ancestor_seal_2_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_2_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_2
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_3 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_3
		}
		this = {
			save_event_target_as = mem_ancestor_seal_3_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_3_loc
			set_ambient_object_flag = mem_ancestor_seal_3_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_3_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_3
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_4 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_4
		}
		this = {
			save_event_target_as = mem_ancestor_seal_4_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_4_loc
			set_ambient_object_flag = mem_ancestor_seal_4_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_4_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_4
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_5 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_5
		}
		this = {
			save_event_target_as = mem_ancestor_seal_5_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_5_loc
			set_ambient_object_flag = mem_ancestor_seal_5_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_5_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet= {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_5
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

mem_ancestor_seal_change_6 = {
	if = {
		limit =  {
			has_ship_flag = mem_ancestor_seal_6
		}
		this = {
			save_event_target_as = mem_ancestor_seal_6_loc
		}
		create_ambient_object = {
			type = "mem_seal_damaged_object"
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_6_loc
			set_ambient_object_flag = mem_ancestor_seal_6_burst
		}
		create_ambient_object = {
			type = mem_effect_explosion_1_object
			duration = 10
			
			use_3d_location = yes
			
			entity_offset = { min = 0 max = 0 }
			entity_offset_angle = { min = 0 max = 0 }
			entity_offset_height = { min = 0 max = 0 }
			
			entity_scale_to_size = yes
			scale = 10
		}
		last_created_ambient_object = {
			set_location = event_target:mem_ancestor_seal_6_loc
		}
		fleet = {
			delete_fleet = this
		}
		random_system = {
			limit = {
				has_star_flag = mem_prison_system
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_planet_6
				}
				orbital_deposit_tile = {
					add_deposit = d_mem_seal
				}
			}
			every_system_planet = {
				limit = {
					has_planet_flag = mem_ancestor_prison_star
				}
				planet_event = { id = mem_ancestor.21 days = 1800 }
			}
		}
		owner = {
			destroy_country = yes
		}
		break = yes
	}
}

#delete orbital station 

mem_ancestor_clear_station = {
	if = {
		limit = {
			has_research_station = yes 
		}
		random_research_station = {
				destroy_fleet = this
		}
	}
}